# The below configuration file is parsed using the libconfig library.
#
# Refer to the official documentation if you need it. Here is a quick breakdown
# of the syntax used.
#
# A value can be set using an equals sign or a colon, the trailing semicolon is optional
# and whitespace is not significant.
#
#   name = value;
#   name: value;
#
# { settings ... }  - curly braces denote a group of settings, and a group can contain
#                     multiple types of configuration
# [ value, ... ]    - square brackets denote an array, and all values within the array
#                     must be of the same configuration type
# ( value, ... )    - parentheses denote a list, and a list can contain multiple groups,
#                     arrays, scalar values or other lists
# /* */, // and #   - treated as comments
# @included "path"  - include another configuration file - useful if you want to split
#                     the configuration into smaller parts
#
# When it comes to syntax highlighting for these kind of configuration files you may
# try Ruby, awk, cucumber, perl, puppet or R.
#


# User and group to drop privileges to after reading credentials.
user  = "nobody";
group = "nogroup";  # Use "nobody" for arch

# Treat a cleared input like a wrong password (in terms of colour)
fail_on_clear = true;

colors:
{
	init = "black",  # after initialization
	input = "#005577",  # during input
	failed = "#CC3333",  # indicates wrong password
	caps = "red",  # used when caps lock is on (with random blocks filter)
	pam = "#9400D3",  # waiting for PAM authentication
	blocks = "#ffffff",  # key feedback block
}

# This sets the opacity level for slock. This is intended to be combined
# with a compositor that can blur the transparent background. The value
# is in the range of 0.0 to 1.0 (fully transparent to fully opaque).
alpha = 1.0;

# This controls features that can be toggled on or off globally
#
functionality:
{
	# Enables transparency for slock.
	Alpha = true;
	# Allows for a custom command to execute automatically after a given number
	# of seconds. This can for example be used to trigger a shutdown after a
	# period of inactivity. Refer to the automatic_timeout setting below.
	# This option has no effect unless slock has been compiled with threading support.
	AutoTimeout = false;
	# If enabled slock will not change to the input colour if a
	# modifier key is pressed while the buffer is empty.
	ControlClear = false;
	# Allows for a custom command to be executed automatically when slock exits.
	# Refer to the exit_command setting below.
	ExitCommand = false;
	# Draws random blocks on the screen to display keypress feedback.
	KeypressFeedback = false;
	# Allows for media keys to be used while the screen is locked.
	# This can be used to adjust the volume or to skip to the next
	# song without having to unlock the screen first.
	MediaKeys = false;
	# This option replaces shadow support with PAM authentication.
	# Change the pam_service setting to the corresponding PAM service
	# when using this functionality.
	# This option has no effect unless slock has been compiled with PAM support.
	PAMAuthentication = false;

	# Adds keyboard shortcuts commonly used in terminal applications.
	#
	#  Key      Function                         Mapped to
	# -----------------------------------------------------
	#  Ctrl-u   Delete until beginning of line   Esc
	#  Ctrl-h   Backspace                        Backspace
	#  Ctrl-j   Line feed                        Return
	#  Ctrl-m   Carriage feed                    Return
	#
	TerminalKeys = false;
	# If enabled slock will interact with the Display Power Management Signaling
	# (DPMS) and automatically shut down the monitor after a configurable amount
	# of seconds. See the dpms_timeout_in_seconds setting below.
	# The monitor will automatically be activated by pressing a key or moving the
	# mouse and the password can be entered after that.
	# This option has no effect unless slock has been compiled with DPMS support.
	TurnMonitorOff = false;
	# This option keeps the screen unlocked but locks input. This means that the
	# screen is not affected by slock and everything is visible, but the user can
	# not interact with the X session unless they enter the correct password. The
	# lack of visual feedback obscures the fact that the screen is locked.
	UnlockedScreen = false;
	# Makes slock read the following X resources on startup:
	#
	#    slock.locked   slock.input   slock.capslock
	#    slock.failed   slock.blocks  slock.pamauth
	#
	Xresources = false;
}

# This allows for slock to be cancelled by mouse movement or by pressing
# any key within the given number of seconds. This can be useful if you
# forgot to disable xautolock during an activity that requires no input
# (e.g. reading text, watching a video, etc.).
#
# Set to 0 seconds to disable.
quick_cancel_timeout_seconds = 0;

# The number of seconds to wait before turning off the monitor. Depends on the
# TurnMonitorOff functionality being enabled and has no effect unless slock has
# been compiled with DPMS support.
dpms_timeout_in_seconds = 5;

# The corresponding PAM service to use when the PAMAuthentication functionality
# is enabled. The default configuration "login" is for ArchLinux's login service.
# This option has no effect unless slock has been compiled with PAM support.
pam_service = "login";

# This section controls the graphical representation of the lock screen
#
# By default if no filters are used the screen will be black. This can for example
# be set to a solid color similarly to how a normal slock works.
#
#   { effect = "solid_color", params = ( "INIT" ) },
#
# Alternatively a screenshot of the desktop can be used as the base image.
#
#   { effect = "screenshot" },
#
# Or one or more image files can be used as a wallpaper.
#
#   { effect = "wallpaper", params = ( "/path/to/img1.ff", "/path/to/images/" ) },
#
# Below is a list of optional filters that can be applied on top of the base
# background image and their expected parameters.
#
#   bloom                    Glow/bloom effect seen in VHS glare, neon, or CRT
#                            scanlines
#                            - brightness threshold (0-255, default 100),
#                              lower values meaning brighter output)
#                            - blur radius (default 5), performance heavy at
#                              higher values (box-blur based)
#                            - bloom intensity (0.0 to 1.0, default 0.9)
#   block_shuffle            Divide the image into small squares (tiles), and
#                            then rearrange them in a deterministic or
#                            semi-random pattern.
#                            - tile width (default 32)
#                            - tile height (default 32)
#                            - randomize? (0 = reverse order, 1 = random shuffle)
#                            - probability of tile being moved (0.0 to 1.0)
#   blur                     Softens the image
#                            - blur radius, e.g. 5.
#   brightness               Darken or brighten the image.
#                            - brightness multiplier; 1.0 means no change,
#                              < 1.0 means darken and > 1.0 means brighten
#   channels                 Used to keep e.g. only one channel.
#                            - keep red channel (0 or 1)
#                            - keep green channel (0 or 1)
#                            - keep blue channel (0 or 1)
#   chroma_crawl             Oscillating color intensity along scanlines.
#                            - frequency of oscillation
#                            - strength of modulation
#   chroma_drift             Adds horizontal chroma shift. Positive numbers
#                            drift right / down, while negative numbers drift
#                            left / up.
#                            - shift amount for red channel
#                            - shift amount for green channel
#                            - shift amount for blue channel
#                            - horizontal (0) or vertical (1) shift
#   color_bleed              Horizontal spreading of bright colors.
#                            - the bleed radius
#                            - the amount to bleed (strength)
#   contrast                 Changes the contrast of the image.
#                            - contrast multiplier; 1.0 means no change, < 1.0
#                              decreases contrast and > 1.0 increases contrast
#   crt_effect               Aims to create a CRT look. Takes five arguments:
#                            - scanline intensity (0.0 to 1.0, default 0.3)
#                            - flicker strength (0.0 to 0.2, default 0.05)
#                            - phosphor stripes (0 = off, 1 = on)
#                            - invert stripes (0 = off, 1 = on)
#                            - glow intensity (0.0 to 1.0, default 0.25)
#   dual_kawase_blur         Takes two arguments:
#                            - the number of iterations
#                            - an integer radius
#   emboss (relief)          A relief filter (sometimes called emboss) simulates
#                            depth by detecting edges and shading them as if lit
#                            from a particular angle.
#                            - intensity (scaling of relief, default 1.0)
#                            - direction X offset (e.g. 1)
#                            - direction Y offset (e.g. 1)
#                            - blend strength (0.0 to 1.0, 1.0 replaces fully)
#   film_grain               Adds film grain effect (additive noise).
#                            - noise strength (integer, e.g. Â±20 levels)
#   flip                     Flips the image on each monitor.
#                            - flip horizontally? (0 or 1)
#                            - flip vertically? (0 or 1)
#   ghosting                 Blend the image with a shifted copy.
#                            - amount of horizontal ghost offset in pixels
#                            - the blend factor (0.0 to 1.0)
#   gradient_map             Applies a gradient color map based on the luminescence
#                            of each pixel.
#                            - gradient string
#                            - blend strength (0.0 to 1.0, defaults to 1.0)
#                            The gradient string should be in this format:
#                                "step:#hex,step:#hex,...,step:#hex"
#                            The step is a value between 0.0 and 1.0, and the hex is
#                            the color to use at each step.
#                            Here is an example gradient string with three steps:
#                                "0:#000000,0.5:#FF0000,1:#FFFFFF"
#   grayscale                Can optionally take R, G and B coefficients
#                            to control luminance calculation. By default
#                            the Rec. 601 coefficients is used, i.e.
#                            (R Ã 0.299 + G Ã 0.587 + B Ã 0.114).
#                            - red coefficients (default 0.299)
#                            - green coefficients (default 0.587)
#                            - blue coefficients (default 0.114)
#   halftone                 Multi-pattern halftone with blend and jitter.
#                            - period (cell size, default 8)
#                            - angle (degrees, default 0)
#                            - invert (0 = black dots, 1 = white dots)
#                            - blend (0.0 to 1.0)
#                            - jitter (0.0 to 1.0)
#                            - pattern (0 = circle, 1 = line, 2 = diamond)
#   horizontal_tear          Shifts pixels horizontally in a random manner.
#                            - max horizontal shift (default 30 pixels),
#                            - tear probability (chance per row, default 0.02),
#                            - tear height in rows (default 8)
#   hue                      Hue rotation. Rotates colors around the hue wheel
#                            while keeping brightness and saturation.
#                            - hue shift in degrees (0 - 360)
#   image                    Loads an image to be placed on the designated monitor.
#                            This is identical to the wallpaper filter just that it
#                            is intended for smaller images that has transparency
#                            (it could be a custom logo for example). The image is
#                            centered on the designated monitor, but if exact
#                            positioning is desirable then consider creating a
#                            transparent image the size of the screen and control
#                            the placement of the logo that way.
#                            - target monitor (index, primary monitor is 0)
#                            - path to image file or directory
#   invert                   Takes no arguments.
#   logo                     Draws the logo as defined in the logo section.
#                            - color to use (e.g. "FAILED", "INPUT", "INIT")
#   modulation_glitch        Applies jitter, color modulation, noise and RGB
#                            separation.
#                            - max jitter (default 10 pixels)
#                            - color modulation strength (default 0.2)
#                            - noise probability per pixel (default 0.01)
#                            - boolean indicating whether to use RGB channel
#                              separation or not
#   noise                    Generates noise, also see soft noise.
#                            - strength (0.0 to 1.0)
#   pixelate                 Pixelates the image based on the block size.
#                            - block size
#   posterize                This filter reduces the number of colors in the image
#                            by specifying the number of levels of colors to keep.
#                            - how many levels of colors to retain (2 or more)
#                            - affect the red channel (0 or 1)
#                            - affect the green channel (0 or 1)
#                            - affect the blue channel (0 or 1)
#   posterize_bit_depth      This filter reduces the bit depth of an image.
#                            The first argument is a number between 1 and 16
#                            indicating how many bits to retain. The remaining
#                            three arguments are booleans indicating whether the
#                            red, green and blue channels are affected.
#                            - how many bits to retain (1 to 16) - lower numbers
#                              have more effect and specifying 16 have no effect
#                            - affect the red channel (0 or 1)
#                            - affect the green channel (0 or 1)
#                            - affect the blue channel (0 or 1)
#   rain_shift_vert          The aim of this filter is to give some distortion
#                            that may resemble rain.
#                            - maximum pixel shift
#   rain_shift_horz          As above, just that the shift is horizontal.
#   random_blocks            Draws a block in a random place on the screen,
#                            intended to be used as an input feedback filter.
#                            The function takes up to eight arguments.
#                            - block height (default: image width / 16)
#                            - block width (default: image height / 16)
#                            - number of horizontal blocks (default depending
#                              on the aspect ratio of the image)
#                            - number of vertical blocks (default 20)
#                            - min position on the x-axis
#                            - max position on the x-axis
#                            - min position on the y-axis
#                            - max position on the y-axis
#                            The last four arguments specify the min/max
#                            positions on the X-axis, and the min/max
#                            positions on the y-axis. This can be used to
#                            constrain the feedback to only affect a specific
#                            area. If not set these will be restricted to the
#                            primary monitor (in a multi-monitor setting).
#   root_wallpaper           Attempts to use the existing wallpaper as the base
#                            image for the screen lock functionality.
#                            Takes no arguments.
#   saturation               Adjusts color saturation.
#                            - saturation multiplier; 1.0 means no change,
#                              < 1.0 decreases and > 1.0 increases saturation
#   scanlines                Adds scanlines:
#                            - spacing (pixels)
#                            - intensity (between 0.0 and 1.0), where lower
#                              numbers are more intense
#   screenshot               Takes a screenshot of the current desktop. Takes no
#                            arguments.
#   sobel                    Used for edge detection. Identifies object boundaries
#                            by calculating the gradient magnitude of pixel intensity
#                            changes. It uses two 3x3 convolution kernels to
#                            approximate the horizontal and vertical derivatives
#                            of an image, then combines these to highlight edges
#                            where intensity changes abruptly.
#                            Takes no arguments.
#   soft_noise               Generates softer noise.
#                            - amount > 0.0
#                            - strength between 0.0 and 1.0 and
#                            - an integer radius
#   solid_color              Paints the entire screen a solid color, like a
#                            standard slock would.
#                            - color to use (e.g. "FAILED", "INPUT", "INIT")
#   temperature              Adjusts the color balance to make the image colder
#                            or warmer. Takes one argument which is the
#                            temperature in kelvin.
#                            - kelvin (range 1000K to 40000K), where 2000 is very
#                              warm (orange), 6500 is neutral white (daylight),
#                              and 10000 is cool (giving a blue tint)
#                            - blend strength (0.0 to 1.0)
#   tint                     Blend each pixel with a given tint color.
#                            - red (0-255)
#                            - green (0-255)
#                            - blue (0-255)
#                            - blend strength (0.0 to 1.0)
#   vignette                 Adds a vignette around all monitors
#                            - overall strength (0.0 to 1.0, default 0.5),
#                              lower values meaning darker vignette
#                            - horizontal edge fraction (default 0.1)
#                            - vertical edge fraction (default 0.1)
#                            - corner radius (default 50)
#                            - smoothness exponent (default 2.0)
#   vhs_jitter               Simulates the VHS jitter effect.
#                            - max offset for the jitter
#   vhs_warp_chroma          Adds VHS distortion.
#                            - the height of the band to affect
#                            - the maximum shift
#                            - the minimum length of the distortion
#                            - boolean to indicate whether to affect the RGB
#                            channels independently (like chroma shift)
#   wallpaper                Uses an image as a wallpaper (base background).
#                            Takes one or more paths to image files to load, one
#                            for each monitor (ordered as per xrandr). The path can
#                            either be to an explicit file, or it can be a directory
#                            in which a random file will be chosen. Note that the
#                            wallpapers do not scale, but will center and crop if
#                            the wallpaper is too large. By default support for
#                            loading farbfeld (.ff) images is integrated, but if
#                            slock is compiled with imlib2 support then other file
#                            types can be loaded as well (e.g. .png, .jpg).
#                            - one or more paths to a file or directory
#                            - blend strength (0.0 to 1.0), optionally the wallpaper
#                              can be blended with the underlying image - this can
#                              be useful if you have a custom overlay
#   wave_distortion          Generates wave distortion.
#                            - max horizontal shift
#                            - wave frequency
#                            - phase offset
#
background:
{
	filters = (
		{ effect = "solid_color", params = ( "INIT" ) },
		{ effect = "logo", params = ( "BLOCKS" ) },
		{ effect = "color_bleed", params = ( 5, 0.8 ) },
		{ effect = "chroma_drift", params = ( 4, 8, -5 ) },
		{ effect = "vhs_warp_chroma", params = ( 84, 800, 100, 1 ) },
		{ effect = "scanlines", params = ( 2, 0.3 ) },
	);
}

# When the KeypressFeedback functionality is used these settings control
# the visual effect of the feedback.
keypress_feedback:
{
	# It is also possible to apply filter effects on every keystroke for visual
	# feedback. If used these need to be very fast effects as to not affect
	# keyboard input.
	filters = (
		{ effect = "chroma_drift", params = ( 1, 0, 0, 0 ) },
		{ effect = "chroma_drift", params = ( -1, 0, 0, 1 ) },
		{ effect = "logo", params = ( "INPUT" ) },
	);
}

# When the logo filter is used the below settings control
# the size, positioning and shape of the logo.
logo:
{
	# Size of each pixel of the logo
	size = 75;
	# This is a list of rectangles that will be drawn to make up the logo.
	# It is a grid pattern with scale 1:1 and the default settings here make
	# up the logo "dwm".
	rectangles = (
		# x   y   w   h #
		( 0,  3,  1,  3 ),
		( 1,  3,  2,  1 ),
		( 0,  5,  8,  1 ),
		( 3,  0,  1,  5 ),
		( 5,  3,  1,  2 ),
		( 7,  3,  1,  2 ),
		( 8,  3,  4,  1 ),
		( 9,  4,  1,  2 ),
		( 11, 4,  1,  2 ),
	);
}

# This option allows for a command to be executed after the wrong password
# have been entered multiple times.
on_failure:
{
	# The number of failed password attempts until the failure command
	# is executed. Set to 0 to disable.
	after_this_many_failures = 0;
	# Command to run after entering the wrong password n times. Must be able
	# to be executed by the user (e.g. nobody) that privileges are dropped to.
	run_command = "doas shutdown";
	# Whether to run the failure command only once, or every subsequent time.
	run_once = true;

	# It is also possible to apply filter effects on password failure.
	filters = (
		{ effect = "logo", params = ( "FAILED" ) },
	);
}

# This option allows for a command to be executed some time after the screen
# has been locked.
automatic_timeout:
{
	# The amount of time until the automatic timeout command is run.
	after_this_many_seconds = 5;
	# Command to run after entering the wrong password n times. Must be able
	# to be executed by the user (e.g. nobody) that privileges are dropped to.
	run_command = "mpc play";
	# Whether to run the timeout command only once or at intervals.
	run_once = true;
}

# This option allows for a command to be executed when slock terminates.
exit_command:
{
	# Command to run after entering the correct password and exiting slock.
	# Note that this will block slock from exiting until the command finishes.
	run_command = "mpc stop";
}

# List of secret "passwords" that can be entered while the screen is locked
# to trigger specific commands.
#
# The commands need to be executable by the user (e.g. nobody) that privileges
# are dropped to.
secret_commands = (
#	{ password = "play", command = "mpc play" },
#	{ password = "next", command = "mpc next" },
#	{ password = "stop", command = "mpc stop" },
)
