# The below configuration file is parsed using the libconfig library.
#
# Refer to the official documentation if you need it. Here is a quick breakdown
# of the syntax used.
#
# A value can be set using an equals sign or a colon, the trailing semicolon is optional
# and whitespace is not significant.
#
#   name = value;
#   name: value;
#
# { settings ... }  - curly braces denote a group of settings, and a group can contain
#                     multiple types of configuration
# [ value, ... ]    - square brackets denote an array, and all values within the array
#                     must be of the same configuration type
# ( value, ... )    - parentheses denote a list, and a list can contain multiple groups,
#                     arrays, scalar values or other lists
# /* */, // and #   - treated as comments
# @included "path"  - include another configuration file - useful if you want to split
#                     the configuration into smaller parts
#
# When it comes to syntax highlighting for these kind of configuration files you may
# try Ruby, awk, cucumber, perl, puppet or R.
#


# User and group to drop privileges to after reading credentials.
user  = "nobody";
group = "nogroup";  # Use "nobody" for arch

# Treat a cleared input like a wrong password (in terms of colour)
fail_on_clear = true;

colors:
{
	background = "#2d2d2d",  # used in the context of logo */
	init = "black",  # after initialization
	input = "#005577",  # during input
	failed = "#CC3333",  # indicates wrong password
	caps = "red",  # used when caps lock is on
	pam = "#9400D3",  # waiting for PAM authentication
	blocks = "#ffffff",  # key feedback block
}

# This sets the opacity level for slock. This is intended to be combined
# with a compositor that can blur the transparent background. The value
# is in the range of 0.0 to 1.0 (fully transparent to fully opaque).
alpha = 0.9;

# This controls features that can be toggled on or off globally
#
functionality:
{
	# Enables transparency for slock.
	Alpha = true;
	# Allows for a custom command to execute automatically after a given number
	# of seconds. This can for example be used to trigger a shutdown after a
	# period of inactivity. Refer to the automatic_timeout setting below.
	# This option has no effect unless slock has been compiled with threading support.
	AutoTimeout = false;
	# Allows for a background image to be displayed on the lock screen instead
	# of a solid colour. Refer to the background setting below.
	# This option has no effect unless slock has been compiled with image support.
	BackgroundImage = false;
	# If enabled slock will not change to the input colour if a
	# modifier key is pressed while the buffer is empty.
	ControlClear = false;
	# Allows for a custom command to be executed automatically when slock exits.
	# Refer to the exit_command setting below.
	ExitCommand = false;
	# Draws random blocks on the screen to display keypress feedback.
	KeypressFeedback = false;
	# Allows for media keys to be used while the screen is locked.
	# This can be used to adjust the volume or to skip to the next
	# song without having to unlock the screen first.
	MediaKeys = false;
	# This option replaces shadow support with PAM authentication.
	# Change the pam_service setting to the corresponding PAM service
	# when using this functionality.
	# This option has no effect unless slock has been compiled with PAM support.
	PAMAuthentication = false;
	# This allows for a logo (made up of rectangles) to be drawn on the lock
	# screen. Refer to the logo settings.
	ShowLogo = false;
	# Adds keyboard shortcuts commonly used in terminal applications.
	#
	#  Key      Function                         Mapped to
	# -----------------------------------------------------
	#  Ctrl-u   Delete until beginning of line   Esc
	#  Ctrl-h   Backspace                        Backspace
	#  Ctrl-j   Line feed                        Return
	#  Ctrl-m   Carriage feed                    Return
	#
	TerminalKeys = false;
	# If enabled slock will interact with the Display Power Management Signaling
	# (DPMS) and automatically shut down the monitor after a configurable amount
	# of seconds. See the dpms_timeout_in_seconds setting below.
	# The monitor will automatically be activated by pressing a key or moving the
	# mouse and the password can be entered after that.
	# This option has no effect unless slock has been compiled with DPMS support.
	TurnMonitorOff = false;
	# This option keeps the screen unlocked but locks input. This means that the
	# screen is not affected by slock and everything is visible, but the user can
	# not interact with the X session unless they enter the correct password. The
	# lack of visual feedback obscures the fact that the screen is locked.
	UnlockedScreen = false;
	# Makes slock read the following X resources on startup:
	#
	#    slock.background  slock.input   slock.capslock  slock.pamauth
	#    slock.locked      slock.failed  slock.blocks
	#
	Xresources = false;
}

# This allows for slock to be cancelled by mouse movement or by pressing
# any key within the given number of seconds. This can be useful if you
# forgot to disable xautolock during an activity that requires no input
# (e.g. reading text, watching a video, etc.).
#
# Set to 0 seconds to disable.
quick_cancel_timeout_seconds = 0;

# The number of seconds to wait before turning off the monitor. Depends on the
# TurnMonitorOff functionality being enabled and has no effect unless slock has
# been compiled with DPMS support.
dpms_timeout_in_seconds = 5;

# The corresponding PAM service to use when the PAMAuthentication functionality
# is enabled. The default configuration "login" is for ArchLinux's login service.
# This option has no effect unless slock has been compiled with PAM support.
pam_service = "login";

# When the BackgroundImage functionality is enabled the below relates to how that
# image is rendered. It can either be specified via an image file, or a screenshot
# can be made which is subsequently pixelated or blurred.
#
# These options have no effect unless slock has been compiled with image support.
background:
{
	# This specifies an image that will be drawn separately on every monitor
	# according to the size of the monitor. This means that for asymmetrical
	# multi-monitor setups the image will be stretched. It is imporant to note
	# that the user (e.g. nobody), that privileges are dropped to, must be able
	# to read the image for it to display.
	image = "";
	# If an image has not been specified above, or is not readable, slock will
	# generate a screenshot that is then pixelated based on the below pixel
	# size. Set to 0 to disable pixelation.
	pixel_size = 15;
	# If the pixel size above has been set to 0 then the image will be blurred
	# based on the given blur radius.
	blur_radius = 5;
}

# When the KeypressFeedback functionality is used these settings control
# the visual effect of the feedback.
blocks:
{
	# This defines the height and width of the feedback blocks.
	# If the height or width is set to 0 then a size relative to
	# the available area divided by count will be used.
	# will be used.
	height = 16;
	width = 16;
	# This controls how many (random) positions blocks may appear on
	# the x and y axes. Set the x or y count to 1 to draw lines or bars.
	count_x = 10;
	count_y = 10;
	# Positioning, this can be used to restrict the area where the
	# feedback blocks are drawn, which can be useful in asymmetrical
	# multi-monitor setups. If set to 0 the full screen is used.
	min_x = 0;
	max_x = 0;
	min_y = 0;
	max_y = 0;
}

# When the ShowLogo functionality is enabled the below settings control
# the size, positioning and shape of the logo.
logo:
{
	# Size of each pixel of the logo
	size = 75;
	# This is a list of rectangles that will be drawn to make up the logo.
	# It is a grid pattern with scale 1:1 and the default settings here make
	# up the logo "dwm".
	rectangles = (
		# x   y   w   h #
		( 0,  3,  1,  3 ),
		( 1,  3,  2,  1 ),
		( 0,  5,  8,  1 ),
		( 3,  0,  1,  5 ),
		( 5,  3,  1,  2 ),
		( 7,  3,  1,  2 ),
		( 8,  3,  4,  1 ),
		( 9,  4,  1,  2 ),
		( 11, 4,  1,  2 ),
	);
}

# This option allows for a command to be executed after the wrong password
# have been entered multiple times.
on_failure:
{
	# The number of failed password attempts until the failure command
	# is executed. Set to 0 to disable.
	after_this_many_failures = 0;
	# Command to run after entering the wrong password n times. Must be able
	# to be executed by the user (e.g. nobody) that privileges are dropped to.
	run_command = "doas shutdown";
	# Whether to run the failure command only once, or every subsequent time.
	run_once = true;
}

# This option allows for a command to be executed some time after the screen
# has been locked.
automatic_timeout:
{
	# The amount of time until the automatic timeout command is run.
	after_this_many_seconds = 5;
	# Command to run after entering the wrong password n times. Must be able
	# to be executed by the user (e.g. nobody) that privileges are dropped to.
	run_command = "mpc play";
	# Whether to run the timeout command only once or at intervals.
	run_once = true;
}

# This option allows for a command to be executed when slock terminates.
exit_command:
{
	# Command to run after entering the correct password and exiting slock.
	# Note that this will block slock from exiting until the command finishes.
	run_command = "mpc stop";
}

# List of secret "passwords" that can be entered while the screen is locked
# to trigger specific commands.
#
# The commands need to be executable by the user (e.g. nobody) that privileges
# are dropped to.
secret_commands = (
#	{ password = "play", command = "mpc play" },
#	{ password = "next", command = "mpc next" },
#	{ password = "stop", command = "mpc stop" },
)
