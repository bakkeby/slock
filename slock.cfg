# The below configuration file is parsed using the libconfig library.
#
# Refer to the official documentation if you need it. Here is a quick breakdown
# of the syntax used.
#
# A value can be set using an equals sign or a colon, the trailing semicolon is optional
# and whitespace is not significant.
#
#   name = value;
#   name: value;
#
# { settings ... }  - curly braces denote a group of settings, and a group can contain
#                     multiple types of configuration
# [ value, ... ]    - square brackets denote an array, and all values within the array
#                     must be of the same configuration type
# ( value, ... )    - parentheses denote a list, and a list can contain multiple groups,
#                     arrays, scalar values or other lists
# /* */, // and #   - treated as comments
# @included "path"  - include another configuration file - useful if you want to split
#                     the configuration into smaller parts
#
# When it comes to syntax highlighting for these kind of configuration files you may
# try Ruby, awk, cucumber, perl, puppet or R.
#


# User and group to drop privileges to after reading credentials.
user  = "nobody";
group = "nogroup";  # Use "nobody" for arch

# Treat a cleared input like a wrong password (in terms of colour)
fail_on_clear = true;

colors:
{
	init = "black",  # after initialization
	input = "#005577",  # during input
	failed = "#CC3333",  # indicates wrong password
	caps = "red",  # used when caps lock is on (with random blocks filter)
	pam = "#9400D3",  # waiting for PAM authentication
	blocks = "#ffffff",  # key feedback block
}

# This sets the opacity level for slock. This is intended to be combined
# with a compositor that can blur the transparent background. The value
# is in the range of 0.0 to 1.0 (fully transparent to fully opaque).
alpha = 1.0;

# This controls features that can be toggled on or off globally
#
functionality:
{
	# Enables transparency for slock.
	Alpha = true;
	# Allows for a custom command to execute automatically after a given number
	# of seconds. This can for example be used to trigger a shutdown after a
	# period of inactivity. Refer to the automatic_timeout setting below.
	# This option has no effect unless slock has been compiled with threading support.
	AutoTimeout = false;
	# Allows for a background image to be displayed on the lock screen instead
	# of a solid colour. Refer to the background setting below.
	# This option has no effect unless slock has been compiled with image support.
	BackgroundImage = true;
	# If enabled slock will not change to the input colour if a
	# modifier key is pressed while the buffer is empty.
	ControlClear = false;
	# Allows for a custom command to be executed automatically when slock exits.
	# Refer to the exit_command setting below.
	ExitCommand = false;
	# Draws random blocks on the screen to display keypress feedback.
	KeypressFeedback = false;
	# Allows for media keys to be used while the screen is locked.
	# This can be used to adjust the volume or to skip to the next
	# song without having to unlock the screen first.
	MediaKeys = false;
	# This option replaces shadow support with PAM authentication.
	# Change the pam_service setting to the corresponding PAM service
	# when using this functionality.
	# This option has no effect unless slock has been compiled with PAM support.
	PAMAuthentication = false;

	# Adds keyboard shortcuts commonly used in terminal applications.
	#
	#  Key      Function                         Mapped to
	# -----------------------------------------------------
	#  Ctrl-u   Delete until beginning of line   Esc
	#  Ctrl-h   Backspace                        Backspace
	#  Ctrl-j   Line feed                        Return
	#  Ctrl-m   Carriage feed                    Return
	#
	TerminalKeys = false;
	# If enabled slock will interact with the Display Power Management Signaling
	# (DPMS) and automatically shut down the monitor after a configurable amount
	# of seconds. See the dpms_timeout_in_seconds setting below.
	# The monitor will automatically be activated by pressing a key or moving the
	# mouse and the password can be entered after that.
	# This option has no effect unless slock has been compiled with DPMS support.
	TurnMonitorOff = false;
	# This option keeps the screen unlocked but locks input. This means that the
	# screen is not affected by slock and everything is visible, but the user can
	# not interact with the X session unless they enter the correct password. The
	# lack of visual feedback obscures the fact that the screen is locked.
	UnlockedScreen = false;
	# Makes slock read the following X resources on startup:
	#
	#    slock.locked   slock.input   slock.capslock
	#    slock.failed   slock.blocks  slock.pamauth
	#
	Xresources = false;
}

# This allows for slock to be cancelled by mouse movement or by pressing
# any key within the given number of seconds. This can be useful if you
# forgot to disable xautolock during an activity that requires no input
# (e.g. reading text, watching a video, etc.).
#
# Set to 0 seconds to disable.
quick_cancel_timeout_seconds = 0;

# The number of seconds to wait before turning off the monitor. Depends on the
# TurnMonitorOff functionality being enabled and has no effect unless slock has
# been compiled with DPMS support.
dpms_timeout_in_seconds = 5;

# The corresponding PAM service to use when the PAMAuthentication functionality
# is enabled. The default configuration "login" is for ArchLinux's login service.
# This option has no effect unless slock has been compiled with PAM support.
pam_service = "login";

# When the BackgroundImage functionality is enabled the below relates to how that
# image is rendered. It can either be specified via an image file, or a screenshot
# can be made which is subsequently pixelated or blurred.
#
# These options have no effect unless slock has been compiled with image support.
background:
{
	# This specifies an image that will be drawn separately on every monitor
	# according to the size of the monitor. This means that for asymmetrical
	# multi-monitor setups the image will be stretched. It is imporant to note
	# that the user (e.g. nobody), that privileges are dropped to, must be able
	# to read the image for it to display.
	image = "";

	# Optionally one or more filters can be applied to the background image.
	# Here is a list of filter options and their expected parameters.
	#
	#    bloom                    Glow/bloom effect seen in VHS glare, neon, or CRT
	#                             scanlines
	#                             - Brightness threshold (0-255, default 100),
	#                               lower values meaning brighter output)
	#                             - Blur radius (default 5), performance heavy at
	#                               higher values (box-blur based)
	#                             - Bloom intensity (0.0 to 1.0, default 0.9)
	#    blur                     Softens the image
	#                             - Blur radius, e.g. 5.
	#    channels                 Used to keep e.g. only one channel. Takes three
	#                             boolean arguments indicating whether to keep
	#                             channel R, G and/or B.
	#    chroma_crawl             Oscillating color intensity along scanlines.
	#                             Takes two arguments: frequency of oscillation and
	#                             strength of modulation.
	#    chroma_drift             Adds horizontal chroma shift. Takes three
	#                             arguments indicating the horizontal shift for
	#                             each of the red, green and blue channels. The
	#                             fourth argument indicates whether the drift is
	#                             horizontal (0) or vertical (1). Positive numbers
	#                             drift right / down, while negative numbers drift
	#                             left / up.
	#    color_bleed              Horizontal spreading of bright colors. Takes two
	#                             arguments; the bleed radius and how much to bleed.
	#    crt_effect               Aims to create a CRT look. Takes five arguments:
	#                             scanline intensity (0.0 to 1.0, default 0.3),
	#                             flicker strength (0.0 to 0.2, default 0.05),
	#                             phosphor stripes (0 = off, 1 = on),
	#                             invert stripes (0 = off, 1 = on),
	#                             glow intensity (0.0 to 1.0, default 0.25)
	#    dual_kawase_blur         Takes two arguments; the number of iterations
	#                             and an integer radius
	#    ghosting                 Blend the image with a shifted copy, takes two
	#                             arguments; amount of horizontal ghost offset in
	#                             pixels, and the blend factor 0.0 to 1.0.
	#    grayscale                Can optionally take R, G and B coefficients
	#                             to control luminance calculation. By default
	#                             the Rec. 601 coefficients is used
	#                             (R × 0.299 + G × 0.587 + B × 0.114).
	#    horizontal_tear          Shifts pixels horizontally in a random manner.
	#                             max horizontal shift (default 30 pixels),
	#                             tear probability (chance per row, default 0.02),
	#                             tear height in rows (default 8)
	#    invert                   Takes no arguments.
	#    logo                     Draws the logo as defined in the logo section.
	#                             Takes one argument which is the color to use,
	#                             and this can be specified as a string, e.g.
	#                             "FAILED", "INPUT", "INIT".
	#    modulation_glitch        Applies jitter, color modulation, noise and RGB
	#                             separation. Takes up to four arguments; max
	#                             jitter (default 10 pixels), color modulation
	#                             strength (default 0.2), noise probability per
	#                             pixel (default 0.01) and boolean indicating
	#                             whether to use RGB channel separation.
	#    noise                    Takes a value between 0.0 and 1.0.
	#    soft_noise               Takes three values; amount > 0.0, strength
	#                             between 0.0 and 1.0, and an integer radius.
	#    pixelate                 Takes one argument which is the block size.
	#    posterize                This filter reduces the bit depth of an image.
	#                             The first argument is a number between 1 and 16
	#                             indicating how many bits to retain (specifying
	#                             16 has no effect). The remaining three arguments
	#                             are booleans indicating whether the red, green
	#                             and blue channels are affected.
	#                             lower numbers have more effect.
	#    rain_shift_vert          Takes one argument which is the maximum pixel
	#                             shift. The aim is to give some distortion that
	#                             may resemble rain.
	#    rain_shift_horz          As above.
	#    random_blocks            Draws a block in a random place on the screen,
	#                             intended to be used as an input feedback filter.
	#                             The function takes up to eight arguments.
	#                             The first two being the block height and width,
	#                             which if left as 0 will be calculated based on
	#                             the width of the image and the number of blocks.
	#                             The third and fourth arguments specify the number
	#                             of horizontal blocks and the number of vertical
	#                             blocks. If left as 0 these will default to 20
	#                             vertical blocks and the number of horizontal
	#                             blocks will depend on the aspect ratio.
	#                             The remaining four arguments specify the min/max
	#                             positions on the X-axis, and the min/max
	#                             positions on the y-axis. This can be used to
	#                             constrain the feedback to only affect a specific
	#                             area. If left as 0 these will default to be
	#                             restricted to the primary monitor (in a multi-
	#                             monitor setting).
	#    scanlines                Takes two arguments; spacing (pixels) and
	#                             intensity (between 0.0 and 1.0, where lower
	#                             numbers are more intense).
	#    sobel                    Takes no arguments.
	#    solid_color              Paints the entire screen a solid color, like a
	#                             standard slock would. Takes one argument which
	#                             is the color name, e.g. "FAILED".
	#    vignette                 Adds a vignette around the primary screen
	#                             - Overall strenght (0.0 to 1.0, default 0.5)
	#                             - Horizontal edge fraction (default 0.1)
	#                             - Vertical edge fraction (default 0.1)
	#                             - Corner readius (default 50)
	#                             - Smoothness exponent (default 2.0)
	#    vhs_jitter               Takes one argument which is the max offset for
	#                             the jitter.
	#    vhs_warp_chroma          Adds VHS distortion. Takes four arguments; the
	#                             height of the band to affect, the maximum shift
	#                             the minimum length of the distortion, and a
	#                             boolean to indicate whether to affect the RGB
	#                             channels independently (chroma shift).
	#    wave_distortion          Takes three arguments; the max horizontal shift,
	#                             wave frequency, and phase offset.
	#
	filters = (
		{ effect = "logo", params = ( "BLOCKS" ) },
		{ effect = "color_bleed", params = ( 5, 0.8 ) },
		{ effect = "chroma_drift", params = ( 4, 8, -5 ) },
		{ effect = "vhs_warp_chroma", params = ( 84, 800, 100, 1 ) },
		{ effect = "scanlines", params = ( 2, 0.3 ) },
	);
}

# When the KeypressFeedback functionality is used these settings control
# the visual effect of the feedback.
keypress_feedback:
{
	# It is also possible to apply filter effects on every keystroke for visual
	# feedback. If used these need to be very fast effects as to not affect
	# keyboard input.
	filters = (
		{ effect = "chroma_drift", params = ( 1, 0, 0, 0 ) },
		{ effect = "chroma_drift", params = ( -1, 0, 0, 1 ) },
		{ effect = "logo", params = ( "INPUT" ) },
	);
}

# When the ShowLogo functionality is enabled the below settings control
# the size, positioning and shape of the logo.
logo:
{
	# Size of each pixel of the logo
	size = 75;
	# This is a list of rectangles that will be drawn to make up the logo.
	# It is a grid pattern with scale 1:1 and the default settings here make
	# up the logo "dwm".
	rectangles = (
		# x   y   w   h #
		( 0,  3,  1,  3 ),
		( 1,  3,  2,  1 ),
		( 0,  5,  8,  1 ),
		( 3,  0,  1,  5 ),
		( 5,  3,  1,  2 ),
		( 7,  3,  1,  2 ),
		( 8,  3,  4,  1 ),
		( 9,  4,  1,  2 ),
		( 11, 4,  1,  2 ),
	);
}

# This option allows for a command to be executed after the wrong password
# have been entered multiple times.
on_failure:
{
	# The number of failed password attempts until the failure command
	# is executed. Set to 0 to disable.
	after_this_many_failures = 0;
	# Command to run after entering the wrong password n times. Must be able
	# to be executed by the user (e.g. nobody) that privileges are dropped to.
	run_command = "doas shutdown";
	# Whether to run the failure command only once, or every subsequent time.
	run_once = true;

	# It is also possible to apply filter effects on password failure.
	filters = (
		{ effect = "logo", params = ( "FAILED" ) },
	);
}

# This option allows for a command to be executed some time after the screen
# has been locked.
automatic_timeout:
{
	# The amount of time until the automatic timeout command is run.
	after_this_many_seconds = 5;
	# Command to run after entering the wrong password n times. Must be able
	# to be executed by the user (e.g. nobody) that privileges are dropped to.
	run_command = "mpc play";
	# Whether to run the timeout command only once or at intervals.
	run_once = true;
}

# This option allows for a command to be executed when slock terminates.
exit_command:
{
	# Command to run after entering the correct password and exiting slock.
	# Note that this will block slock from exiting until the command finishes.
	run_command = "mpc stop";
}

# List of secret "passwords" that can be entered while the screen is locked
# to trigger specific commands.
#
# The commands need to be executable by the user (e.g. nobody) that privileges
# are dropped to.
secret_commands = (
#	{ password = "play", command = "mpc play" },
#	{ password = "next", command = "mpc next" },
#	{ password = "stop", command = "mpc stop" },
)
